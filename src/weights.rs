
//! Autogenerated weights for `peaq_pallet_mor`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-28, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `AMD Ryzen 5 5600H with Radeon Graphics`
//! EXECUTION: Some(Native), WASM-EXECUTION: Compiled, CHAIN: Some("dev-local"), DB CACHE: 1024

// Executed Command:
// ./target/release/peaq-node
// benchmark
// pallet
// --chain=dev-local
// --execution=native
// --wasm-execution=compiled
// --pallet=peaq_pallet_mor
// --extrinsic=*
// --steps=50
// --repeat=20
// --output=weight.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `peaq_pallet_mor`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> crate::WeightInfo for WeightInfo<T> {
	/// Storage: PeaqDid OwnerStore (r:1 w:0)
	/// Proof Skipped: PeaqDid OwnerStore (max_values: None, max_size: None, mode: Measured)
	/// Storage: PeaqMor MachineRegister (r:1 w:1)
	/// Proof Skipped: PeaqMor MachineRegister (max_values: None, max_size: None, mode: Measured)
	/// Storage: PeaqMor MorConfigStorage (r:1 w:0)
	/// Proof Skipped: PeaqMor MorConfigStorage (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn get_registration_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `531`
		//  Estimated: `3996`
		// Minimum execution time: 144_875_000 picoseconds.
		Weight::from_parts(146_187_000, 0)
			.saturating_add(Weight::from_parts(0, 3996))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: PeaqDid OwnerStore (r:1 w:0)
	/// Proof Skipped: PeaqDid OwnerStore (max_values: None, max_size: None, mode: Measured)
	/// Storage: PeaqMor MachineRegister (r:1 w:0)
	/// Proof Skipped: PeaqMor MachineRegister (max_values: None, max_size: None, mode: Measured)
	/// Storage: PeaqMor PeriodRewardStorage (r:1 w:0)
	/// Proof Skipped: PeaqMor PeriodRewardStorage (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn get_online_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `622`
		//  Estimated: `4087`
		// Minimum execution time: 50_345_000 picoseconds.
		Weight::from_parts(51_427_000, 0)
			.saturating_add(Weight::from_parts(0, 4087))
			.saturating_add(T::DbWeight::get().reads(4))
	}
	/// Storage: PeaqMor MorConfigStorage (r:1 w:0)
	/// Proof Skipped: PeaqMor MorConfigStorage (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn pay_machine_usage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `198`
		//  Estimated: `3593`
		// Minimum execution time: 129_776_000 picoseconds.
		Weight::from_parts(130_728_000, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: PeaqMor RewardsRecordStorage (r:1 w:1)
	/// Proof Skipped: PeaqMor RewardsRecordStorage (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: PeaqMor MorConfigStorage (r:0 w:1)
	/// Proof Skipped: PeaqMor MorConfigStorage (max_values: Some(1), max_size: None, mode: Measured)
	fn set_configuration() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3377`
		//  Estimated: `4862`
		// Minimum execution time: 138_553_000 picoseconds.
		Weight::from_parts(139_795_000, 0)
			.saturating_add(Weight::from_parts(0, 4862))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn fetch_pot_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `52`
		//  Estimated: `3593`
		// Minimum execution time: 24_276_000 picoseconds.
		Weight::from_parts(24_646_000, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(1))
	}
}
